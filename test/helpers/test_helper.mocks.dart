// Mocks generated by Mockito 5.3.0 from annotations
// in space_pics/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:convert' as _i10;
import 'dart:typed_data' as _i11;

import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:space_pics/data/datasources/local_datadource.dart' as _i8;
import 'package:space_pics/data/datasources/nasa_datasource.dart' as _i6;
import 'package:space_pics/data/datasources/offline_datasource.dart' as _i9;
import 'package:space_pics/data/models/pic_of_day_model.dart' as _i7;
import 'package:space_pics/domain/entities/pic_of_day.dart' as _i5;
import 'package:space_pics/domain/repositories/pictures_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [PicturesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPicturesRepository extends _i1.Mock
    implements _i3.PicturesRepository {
  MockPicturesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.PicOfDay>> getPictures(
          {String? startDate,
          String? endDate,
          String? keyword,
          bool? offline}) =>
      (super.noSuchMethod(
              Invocation.method(#getPictures, [], {
                #startDate: startDate,
                #endDate: endDate,
                #keyword: keyword,
                #offline: offline
              }),
              returnValue:
                  _i4.Future<List<_i5.PicOfDay>>.value(<_i5.PicOfDay>[]))
          as _i4.Future<List<_i5.PicOfDay>>);
}

/// A class which mocks [NasaDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockNasaDataSource extends _i1.Mock implements _i6.NasaDataSource {
  MockNasaDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i7.PicOfDayModel>> getNasaPictures(
          {String? startDate, String? endDate}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getNasaPictures, [], {#startDate: startDate, #endDate: endDate}),
          returnValue: _i4.Future<List<_i7.PicOfDayModel>>.value(
              <_i7.PicOfDayModel>[])) as _i4.Future<List<_i7.PicOfDayModel>>);
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i8.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i7.PicOfDayModel>> getLocalData({String? keyword}) => (super
      .noSuchMethod(Invocation.method(#getLocalData, [], {#keyword: keyword}),
          returnValue: _i4.Future<List<_i7.PicOfDayModel>>.value(
              <_i7.PicOfDayModel>[])) as _i4.Future<List<_i7.PicOfDayModel>>);
}

/// A class which mocks [OfflineDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockOfflineDataSource extends _i1.Mock implements _i9.OfflineDataSource {
  MockOfflineDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i7.PicOfDayModel>> getOfflineData({String? keyword}) =>
      (super.noSuchMethod(
          Invocation.method(#getOfflineData, [], {#keyword: keyword}),
          returnValue: _i4.Future<List<_i7.PicOfDayModel>>.value(
              <_i7.PicOfDayModel>[])) as _i4.Future<List<_i7.PicOfDayModel>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i2.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
                  this, Invocation.method(#head, [url], {#headers: headers}))))
          as _i4.Future<_i2.Response>);
  @override
  _i4.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
                  this, Invocation.method(#get, [url], {#headers: headers}))))
          as _i4.Future<_i2.Response>);
  @override
  _i4.Future<_i2.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i10.Encoding? encoding}) =>
      (super
          .noSuchMethod(Invocation.method(#post, [url], {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
                  this,
                  Invocation.method(#post, [
                    url
                  ], {
                    #headers: headers,
                    #body: body,
                    #encoding: encoding
                  })))) as _i4.Future<_i2.Response>);
  @override
  _i4.Future<_i2.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i10.Encoding? encoding}) =>
      (super
          .noSuchMethod(Invocation.method(#put, [url], {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
                  this,
                  Invocation.method(#put, [
                    url
                  ], {
                    #headers: headers,
                    #body: body,
                    #encoding: encoding
                  })))) as _i4.Future<_i2.Response>);
  @override
  _i4.Future<_i2.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i10.Encoding? encoding}) =>
      (super
          .noSuchMethod(Invocation.method(#patch, [url], {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
                  this,
                  Invocation.method(#patch, [
                    url
                  ], {
                    #headers: headers,
                    #body: body,
                    #encoding: encoding
                  })))) as _i4.Future<_i2.Response>);
  @override
  _i4.Future<_i2.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i10.Encoding? encoding}) =>
      (super
          .noSuchMethod(Invocation.method(#delete, [url], {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
                  this,
                  Invocation.method(#delete, [
                    url
                  ], {
                    #headers: headers,
                    #body: body,
                    #encoding: encoding
                  })))) as _i4.Future<_i2.Response>);
  @override
  _i4.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: _i4.Future<String>.value('')) as _i4.Future<String>);
  @override
  _i4.Future<_i11.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: _i4.Future<_i11.Uint8List>.value(_i11.Uint8List(0)))
          as _i4.Future<_i11.Uint8List>);
  @override
  _i4.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue: _i4.Future<_i2.StreamedResponse>.value(
                  _FakeStreamedResponse_1(
                      this, Invocation.method(#send, [request]))))
          as _i4.Future<_i2.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
